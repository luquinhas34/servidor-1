generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                @id @default(autoincrement())
  email             String             @unique
  name              String
  password          String
  role              String

  // Relacionamentos
  avaliacao         Avaliacao[]
  diarios           Diario[]
  tarefas           Atividade[]
  avisos            Aviso[]
  chamadas          Chamadas[]
  turmas            TurmaUsuario[]
  mensagens         Mensagem[]         @relation("MensagensAutor")
  chatsParticipando ChatParticipante[]
  responsavelDe     ResponsavelAluno[] @relation("ResponsavelRelacao")
  responsaveis      ResponsavelAluno[] @relation("AlunoRelacao")
  aluno             Aluno?
    professor Professor?  
  presencas         Presenca[]         @relation("PresencaAluno")
}

model Professor {
    id             Int      @id @default(autoincrement())
  name           String
  cpf            String
  telefone       String
  dataNascimento DateTime
  email          String
  matricula      String
  password       String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userId         Int      @unique // Adicione a chave única aqui
  user           User     @relation(fields: [userId], references: [id])
}



model Aluno {
  id             Int      @id @default(autoincrement())
  nome           String
  cpf            String
  telefone       String
  dataNascimento DateTime
  email          String
  cpfMae         String
  cpfPai         String
  senha          String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userId         Int      @unique // Adicione a chave única aqui
  user           User     @relation(fields: [userId], references: [id])
}

model Turma {
  id         Int            @id @default(autoincrement())
  nome       String
  descricao  String?
  chamadas   Chamadas[]
  usuarios   TurmaUsuario[]
  atividades Atividade[]
  avaliacoes Avaliacao[]
  presencas  Presenca[]
  Diario     Diario[]
}

model TurmaUsuario {
  id      Int   @id @default(autoincrement())
  userId  Int
  turmaId Int

  turma   Turma @relation(fields: [turmaId], references: [id])
  user    User  @relation(fields: [userId], references: [id])

  @@unique([userId, turmaId])
}

model Chamadas {
  id        Int        @id @default(autoincrement())
  data      DateTime   @default(now())
  nome      String
  materia   String
  turmaId   Int
  userId    Int

  turma     Turma      @relation(fields: [turmaId], references: [id])
  user      User       @relation(fields: [userId], references: [id])
  presencas Presenca[]

  @@map("chamadas")
}

model Presenca {
  id        Int      @id @default(autoincrement())
  alunoId   Int
  chamadaId Int
  turmaId   Int
  status    Status

  turma     Turma      @relation(fields: [turmaId], references: [id])
  chamada   Chamadas   @relation(fields: [chamadaId], references: [id])
  Diario    Diario[]
  aluno     User       @relation("PresencaAluno", fields: [alunoId], references: [id])

  @@map("presencas")
}

model Diario {
  id        Int       @id @default(autoincrement())
  alunoId   Int
  turmaId   Int
  data      DateTime  @default(now())
  status    Status
  userId    Int

  user      User       @relation(fields: [userId], references: [id])
  turma     Turma      @relation(fields: [turmaId], references: [id])
  presencas Presenca[]

  @@map("diarios")
}

enum Status {
  PRESENCA
  FALTA
}

model Atividade {
  id         Int      @id @default(autoincrement())
  titulo     String
  descricao  String
  dataInicio DateTime
  dataFim    DateTime
  turmaId    Int
  documento  String?
  userId     Int

  turma      Turma    @relation(fields: [turmaId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model Aviso {
  id        Int      @id @default(autoincrement())
  titulo    String   @db.VarChar(100)
  descricao String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int

  user      User     @relation(fields: [userId], references: [id])

  @@map("avisos")
}

model Avaliacao {
  id         Int      @id @default(autoincrement())
  titulo     String
  descricao  String
  turmaId    Int
  dataInicio DateTime
  dataFim    DateTime
  documento  String?
  userId     Int
  data       DateTime @default(now())

  turma      Turma    @relation(fields: [turmaId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@map("avaliacoes")
}

model Chat {
  id              Int                @id @default(autoincrement())
  titulo          String?
  participantes   ChatParticipante[]
  mensagens       Mensagem[]
  updatedAt       DateTime           @updatedAt
}

model ChatParticipante {
  id     Int   @id @default(autoincrement())
  userId Int
  chatId Int

  user   User  @relation(fields: [userId], references: [id])
  chat   Chat  @relation(fields: [chatId], references: [id])
}

model Mensagem {
  id          Int      @id @default(autoincrement())
  texto       String
  chatId      Int
  remetenteId Int
  data        DateTime @default(now())
  createdAt   DateTime @default(now())

  remetente   User     @relation("MensagensAutor", fields: [remetenteId], references: [id])
  chat        Chat     @relation(fields: [chatId], references: [id])
}

model ResponsavelAluno {
  id            Int  @id @default(autoincrement())
  responsavelId Int
  alunoId       Int

  responsavel   User @relation("ResponsavelRelacao", fields: [responsavelId], references: [id])
  aluno         User @relation("AlunoRelacao", fields: [alunoId], references: [id])

  @@unique([responsavelId, alunoId])
}

model Horario {
  id         Int    @id @default(autoincrement())
  dia        String
  turno      String
  atividade  String
  horaInicio String
  horaFim    String
}
